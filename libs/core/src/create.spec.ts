import { CreateOperation } from './create';
import { Model, hasMany } from './model';
import { array, number, object, string } from './schema';

const ProductSchema = object({
  id: number().autoGenerated(),
  name: string(),
});
class ProductModel extends Model<typeof ProductSchema> {
  primaryKey = ['id', 'name'] as const;
  categories = hasMany(() => tables.categories);
}

const CategorySchema = object({
  id: number().autoGenerated(),
  name: string(),
});
class CategoryModel extends Model<typeof CategorySchema> {
  primaryKey = ['id', 'name'] as const;
  products = hasMany(() => tables.products);
}

const tables = {
  products: new ProductModel(ProductSchema),
  categories: new CategoryModel(CategorySchema),
};

describe('CreateOperation', function () {
  it('should set model', function () {
    const createOperation = new CreateOperation(tables.products);
    expect(createOperation.model).toEqual(tables.products);
  });
  it('should turn auto generated properties to optional', function () {
    const createOperation = new CreateOperation(tables.products);
    expect(createOperation.inputSchema).toEqual(
      object({
        id: number().autoGenerated().optional(),
        name: string(),
      })
    );
  });

  describe('withReferenceTo', function () {
    describe('hasMany reference', function () {
      it('should add referenced model primary key as array schema', function () {
        const createOperation = new CreateOperation(
          tables.products
        ).withReferenceTo('categories');
        expect(createOperation.inputSchema.config.shape).toEqual(
          expect.objectContaining({
            categories: array(
              object({ id: number().autoGenerated(), name: string() })
            ),
          })
        );
      });
    });
  });
});
