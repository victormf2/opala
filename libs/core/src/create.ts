import { KeysOfType, PartialByKey } from '@app-builder/utils';
import {
  HasMany,
  Model,
  ModelReferenceKeys,
  ModelShape,
  ModelType,
  PrimaryKeyShape,
} from './model';
import { Operation } from './operation';
import { AutoGeneratedSchema, ShapeObject } from './schema';

export type Create<
  TModel extends Model,
  TInput = CreateAttributes<TModel>
> = Operation<TInput, unknown> & {
  withReferenceTo: <RKey extends ModelReferenceKeys<TModel>>(
    referenceKey: RKey
  ) => Create<TModel, TInput & ReferenceAttributes<TModel, RKey>>;
};

type CreateAttributes<TModel extends Model> =
  MakeAutoGeneratedAttributesOptional<TModel>;

type MakeAutoGeneratedAttributesOptional<TModel extends Model> = PartialByKey<
  ModelType<TModel>,
  KeysOfType<ModelShape<TModel>, AutoGeneratedSchema>
>;

type ReferenceAttributes<
  TModel extends Model,
  RKey extends ModelReferenceKeys<TModel>
> = {
  [Key in RKey]: TModel[RKey] extends HasMany<infer TReferencedModel>
    ? ShapeObject<PrimaryKeyShape<TReferencedModel>>[]
    : never;
};
