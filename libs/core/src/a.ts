import { Model, hasMany } from './model';
import { Operation } from './operation';
import { build } from './operation-builder';
import { or } from './query';
import { number, object, string } from './schema';

type RequestHandler = (req: Request) => Promise<Response>;
declare function operation<TInput, TOutput>(
  operation: Operation<TInput, TOutput>
): RequestHandler;

declare function api(api: Api): void;

type RouteParameters<Route extends string> =
  Route extends `${infer _}{${infer Parameter}}${infer Right}`
    ? { [K in Parameter]: string } & RouteParameters<Right>
    : unknown;

type HttpMethods = 'get' | 'post' | 'put' | 'patch' | 'delete';
type ApiShape<T> = (
  | {
      [K in keyof T]: ApiShape<T[K]>;
    }
  | RequestHandler
) & { [M in HttpMethods]?: RequestHandler };

type ApiRoute = `${HttpMethods} ${string}`;
type Api = {
  [Route in ApiRoute]: RequestHandler;
};

const ProductSchema = object({
  id: number().autoGenerated(),
  name: string(),
});
class ProductModel extends Model<typeof ProductSchema> {
  primaryKey = ['id', 'name'] as const;
  categories = hasMany(() => tables.categories);
}

const CategorySchema = object({
  id: number().autoGenerated(),
  name: string(),
});
class CategoryModel extends Model<typeof CategorySchema> {
  primaryKey = ['id'] as const;
  products = hasMany(() => tables.products);
}

const tables = {
  products: new ProductModel(ProductSchema),
  categories: new CategoryModel(CategorySchema),
};

const $ = build(tables);

api({
  'get /products': operation(
    $.using(object({ name: string() })).do(({ name }) =>
      $.from('products')
        .filter((product) =>
          or(
            product.name.includes(name),
            product.categories.some((category) => category.name.includes(name))
          )
        )
        .all()
    )
  ),
  'get /products/{id}': operation(
    $.using(object({ id: number() })).do(({ id }) =>
      $.from('products')
        .filter((product) => product.id.equals(id))
        .first()
    )
  ),
  'post /products': operation(
    $.create('products').withReferenceTo('categories')
  ),

  // '/products': {
  //   '/{id}': {
  //     get: endpoint({
  //       input: object({ id: number() }),
  //       operation: ($) =>
  //         $.from('products').filter((product, { id }) => product.id.equals(id)),
  //     }),
  //   },
  //   get: endpoint({
  //     input: object({ name: string() }),
  //     operation: ($) =>
  //       $.from('products').filter((product, { name }) =>
  //         or(
  //           product.name.includes(name),
  //           product.categories.some((category) => category.name.includes(name))
  //         )
  //       ),
  //   }),
  // },
});

const C = $.create('products').withReferenceTo('categories');
type Input = typeof C extends Operation<infer TInput, unknown> ? TInput : never;
const n: Input = {
  name: '123',
  categories: [{ id: 12 }],
};
